# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'age': 'int',
        'first_name': 'str',
        'full_name': 'str',
        'gender': 'str',
        'id': 'str',
        'last_name': 'str',
        'ratings': 'ExternalUserRatingResponse'
    }

    attribute_map = {
        'address': 'address',
        'age': 'age',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'gender': 'gender',
        'id': 'id',
        'last_name': 'lastName',
        'ratings': 'ratings'
    }

    def __init__(self, address=None, age=None, first_name=None, full_name=None, gender=None, id=None, last_name=None, ratings=None):  # noqa: E501
        """ExternalUserResponse - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._age = None
        self._first_name = None
        self._full_name = None
        self._gender = None
        self._id = None
        self._last_name = None
        self._ratings = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if age is not None:
            self.age = age
        self.first_name = first_name
        self.full_name = full_name
        if gender is not None:
            self.gender = gender
        self.id = id
        self.last_name = last_name
        if ratings is not None:
            self.ratings = ratings

    @property
    def address(self):
        """Gets the address of this ExternalUserResponse.  # noqa: E501

        User location usually in form of city, state, country.  # noqa: E501

        :return: The address of this ExternalUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ExternalUserResponse.

        User location usually in form of city, state, country.  # noqa: E501

        :param address: The address of this ExternalUserResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def age(self):
        """Gets the age of this ExternalUserResponse.  # noqa: E501

        User's age  # noqa: E501

        :return: The age of this ExternalUserResponse.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ExternalUserResponse.

        User's age  # noqa: E501

        :param age: The age of this ExternalUserResponse.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def first_name(self):
        """Gets the first_name of this ExternalUserResponse.  # noqa: E501

        First name of the user  # noqa: E501

        :return: The first_name of this ExternalUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ExternalUserResponse.

        First name of the user  # noqa: E501

        :param first_name: The first_name of this ExternalUserResponse.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this ExternalUserResponse.  # noqa: E501

        Full name of user  # noqa: E501

        :return: The full_name of this ExternalUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ExternalUserResponse.

        Full name of user  # noqa: E501

        :param full_name: The full_name of this ExternalUserResponse.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this ExternalUserResponse.  # noqa: E501

        User's gender  # noqa: E501

        :return: The gender of this ExternalUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ExternalUserResponse.

        User's gender  # noqa: E501

        :param gender: The gender of this ExternalUserResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this ExternalUserResponse.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The id of this ExternalUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalUserResponse.

        Unique identifier  # noqa: E501

        :param id: The id of this ExternalUserResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this ExternalUserResponse.  # noqa: E501

        Last name of the user  # noqa: E501

        :return: The last_name of this ExternalUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ExternalUserResponse.

        Last name of the user  # noqa: E501

        :param last_name: The last_name of this ExternalUserResponse.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def ratings(self):
        """Gets the ratings of this ExternalUserResponse.  # noqa: E501


        :return: The ratings of this ExternalUserResponse.  # noqa: E501
        :rtype: ExternalUserRatingResponse
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this ExternalUserResponse.


        :param ratings: The ratings of this ExternalUserResponse.  # noqa: E501
        :type: ExternalUserRatingResponse
        """

        self._ratings = ratings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalUserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalUserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
