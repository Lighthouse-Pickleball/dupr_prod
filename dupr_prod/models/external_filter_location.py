# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalFilterLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'lat': 'float',
        'lng': 'float',
        'radius_in_meters': 'float'
    }

    attribute_map = {
        'address': 'address',
        'lat': 'lat',
        'lng': 'lng',
        'radius_in_meters': 'radiusInMeters'
    }

    def __init__(self, address=None, lat=None, lng=None, radius_in_meters=None):  # noqa: E501
        """ExternalFilterLocation - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._lat = None
        self._lng = None
        self._radius_in_meters = None
        self.discriminator = None
        self.address = address
        self.lat = lat
        self.lng = lng
        self.radius_in_meters = radius_in_meters

    @property
    def address(self):
        """Gets the address of this ExternalFilterLocation.  # noqa: E501

        Street level address in format county / city, state / region, country  # noqa: E501

        :return: The address of this ExternalFilterLocation.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ExternalFilterLocation.

        Street level address in format county / city, state / region, country  # noqa: E501

        :param address: The address of this ExternalFilterLocation.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def lat(self):
        """Gets the lat of this ExternalFilterLocation.  # noqa: E501

        Earth's latitude value  # noqa: E501

        :return: The lat of this ExternalFilterLocation.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ExternalFilterLocation.

        Earth's latitude value  # noqa: E501

        :param lat: The lat of this ExternalFilterLocation.  # noqa: E501
        :type: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this ExternalFilterLocation.  # noqa: E501

        Earth's longitude value  # noqa: E501

        :return: The lng of this ExternalFilterLocation.  # noqa: E501
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this ExternalFilterLocation.

        Earth's longitude value  # noqa: E501

        :param lng: The lng of this ExternalFilterLocation.  # noqa: E501
        :type: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")  # noqa: E501

        self._lng = lng

    @property
    def radius_in_meters(self):
        """Gets the radius_in_meters of this ExternalFilterLocation.  # noqa: E501

        Radius distance in meters from the point of provided latitude and longitude, default is 40233.6 meters (25 miles)  # noqa: E501

        :return: The radius_in_meters of this ExternalFilterLocation.  # noqa: E501
        :rtype: float
        """
        return self._radius_in_meters

    @radius_in_meters.setter
    def radius_in_meters(self, radius_in_meters):
        """Sets the radius_in_meters of this ExternalFilterLocation.

        Radius distance in meters from the point of provided latitude and longitude, default is 40233.6 meters (25 miles)  # noqa: E501

        :param radius_in_meters: The radius_in_meters of this ExternalFilterLocation.  # noqa: E501
        :type: float
        """
        if radius_in_meters is None:
            raise ValueError("Invalid value for `radius_in_meters`, must not be `None`")  # noqa: E501

        self._radius_in_meters = radius_in_meters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalFilterLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalFilterLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
