# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalUserRatingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doubles': 'str',
        'doubles_half_life': 'float',
        'doubles_reliability_score': 'float',
        'is_doubles_reliable': 'bool',
        'is_singles_reliable': 'bool',
        'provisional_ratings': 'ProvisionalRating',
        'singles': 'str',
        'singles_half_life': 'float',
        'singles_reliability_score': 'float'
    }

    attribute_map = {
        'doubles': 'doubles',
        'doubles_half_life': 'doublesHalfLife',
        'doubles_reliability_score': 'doublesReliabilityScore',
        'is_doubles_reliable': 'isDoublesReliable',
        'is_singles_reliable': 'isSinglesReliable',
        'provisional_ratings': 'provisionalRatings',
        'singles': 'singles',
        'singles_half_life': 'singlesHalfLife',
        'singles_reliability_score': 'singlesReliabilityScore'
    }

    def __init__(self, doubles=None, doubles_half_life=None, doubles_reliability_score=None, is_doubles_reliable=None, is_singles_reliable=None, provisional_ratings=None, singles=None, singles_half_life=None, singles_reliability_score=None):  # noqa: E501
        """ExternalUserRatingResponse - a model defined in Swagger"""  # noqa: E501
        self._doubles = None
        self._doubles_half_life = None
        self._doubles_reliability_score = None
        self._is_doubles_reliable = None
        self._is_singles_reliable = None
        self._provisional_ratings = None
        self._singles = None
        self._singles_half_life = None
        self._singles_reliability_score = None
        self.discriminator = None
        if doubles is not None:
            self.doubles = doubles
        if doubles_half_life is not None:
            self.doubles_half_life = doubles_half_life
        if doubles_reliability_score is not None:
            self.doubles_reliability_score = doubles_reliability_score
        if is_doubles_reliable is not None:
            self.is_doubles_reliable = is_doubles_reliable
        if is_singles_reliable is not None:
            self.is_singles_reliable = is_singles_reliable
        if provisional_ratings is not None:
            self.provisional_ratings = provisional_ratings
        if singles is not None:
            self.singles = singles
        if singles_half_life is not None:
            self.singles_half_life = singles_half_life
        if singles_reliability_score is not None:
            self.singles_reliability_score = singles_reliability_score

    @property
    def doubles(self):
        """Gets the doubles of this ExternalUserRatingResponse.  # noqa: E501


        :return: The doubles of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._doubles

    @doubles.setter
    def doubles(self, doubles):
        """Sets the doubles of this ExternalUserRatingResponse.


        :param doubles: The doubles of this ExternalUserRatingResponse.  # noqa: E501
        :type: str
        """

        self._doubles = doubles

    @property
    def doubles_half_life(self):
        """Gets the doubles_half_life of this ExternalUserRatingResponse.  # noqa: E501

        The doubles half life for the user, if available  # noqa: E501

        :return: The doubles_half_life of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: float
        """
        return self._doubles_half_life

    @doubles_half_life.setter
    def doubles_half_life(self, doubles_half_life):
        """Sets the doubles_half_life of this ExternalUserRatingResponse.

        The doubles half life for the user, if available  # noqa: E501

        :param doubles_half_life: The doubles_half_life of this ExternalUserRatingResponse.  # noqa: E501
        :type: float
        """

        self._doubles_half_life = doubles_half_life

    @property
    def doubles_reliability_score(self):
        """Gets the doubles_reliability_score of this ExternalUserRatingResponse.  # noqa: E501


        :return: The doubles_reliability_score of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: float
        """
        return self._doubles_reliability_score

    @doubles_reliability_score.setter
    def doubles_reliability_score(self, doubles_reliability_score):
        """Sets the doubles_reliability_score of this ExternalUserRatingResponse.


        :param doubles_reliability_score: The doubles_reliability_score of this ExternalUserRatingResponse.  # noqa: E501
        :type: float
        """

        self._doubles_reliability_score = doubles_reliability_score

    @property
    def is_doubles_reliable(self):
        """Gets the is_doubles_reliable of this ExternalUserRatingResponse.  # noqa: E501

        Is doubles rating reliable  # noqa: E501

        :return: The is_doubles_reliable of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_doubles_reliable

    @is_doubles_reliable.setter
    def is_doubles_reliable(self, is_doubles_reliable):
        """Sets the is_doubles_reliable of this ExternalUserRatingResponse.

        Is doubles rating reliable  # noqa: E501

        :param is_doubles_reliable: The is_doubles_reliable of this ExternalUserRatingResponse.  # noqa: E501
        :type: bool
        """

        self._is_doubles_reliable = is_doubles_reliable

    @property
    def is_singles_reliable(self):
        """Gets the is_singles_reliable of this ExternalUserRatingResponse.  # noqa: E501

        Is singles rating reliable  # noqa: E501

        :return: The is_singles_reliable of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_singles_reliable

    @is_singles_reliable.setter
    def is_singles_reliable(self, is_singles_reliable):
        """Sets the is_singles_reliable of this ExternalUserRatingResponse.

        Is singles rating reliable  # noqa: E501

        :param is_singles_reliable: The is_singles_reliable of this ExternalUserRatingResponse.  # noqa: E501
        :type: bool
        """

        self._is_singles_reliable = is_singles_reliable

    @property
    def provisional_ratings(self):
        """Gets the provisional_ratings of this ExternalUserRatingResponse.  # noqa: E501


        :return: The provisional_ratings of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: ProvisionalRating
        """
        return self._provisional_ratings

    @provisional_ratings.setter
    def provisional_ratings(self, provisional_ratings):
        """Sets the provisional_ratings of this ExternalUserRatingResponse.


        :param provisional_ratings: The provisional_ratings of this ExternalUserRatingResponse.  # noqa: E501
        :type: ProvisionalRating
        """

        self._provisional_ratings = provisional_ratings

    @property
    def singles(self):
        """Gets the singles of this ExternalUserRatingResponse.  # noqa: E501


        :return: The singles of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._singles

    @singles.setter
    def singles(self, singles):
        """Sets the singles of this ExternalUserRatingResponse.


        :param singles: The singles of this ExternalUserRatingResponse.  # noqa: E501
        :type: str
        """

        self._singles = singles

    @property
    def singles_half_life(self):
        """Gets the singles_half_life of this ExternalUserRatingResponse.  # noqa: E501

        The singles half life for the user, if available  # noqa: E501

        :return: The singles_half_life of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: float
        """
        return self._singles_half_life

    @singles_half_life.setter
    def singles_half_life(self, singles_half_life):
        """Sets the singles_half_life of this ExternalUserRatingResponse.

        The singles half life for the user, if available  # noqa: E501

        :param singles_half_life: The singles_half_life of this ExternalUserRatingResponse.  # noqa: E501
        :type: float
        """

        self._singles_half_life = singles_half_life

    @property
    def singles_reliability_score(self):
        """Gets the singles_reliability_score of this ExternalUserRatingResponse.  # noqa: E501


        :return: The singles_reliability_score of this ExternalUserRatingResponse.  # noqa: E501
        :rtype: float
        """
        return self._singles_reliability_score

    @singles_reliability_score.setter
    def singles_reliability_score(self, singles_reliability_score):
        """Sets the singles_reliability_score of this ExternalUserRatingResponse.


        :param singles_reliability_score: The singles_reliability_score of this ExternalUserRatingResponse.  # noqa: E501
        :type: float
        """

        self._singles_reliability_score = singles_reliability_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalUserRatingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalUserRatingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
