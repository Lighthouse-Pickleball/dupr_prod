# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_non_expired': 'bool',
        'account_non_locked': 'bool',
        'admin': 'bool',
        'authorities': 'list[GrantedAuthority]',
        'birthdate': 'date',
        'created': 'datetime',
        'credentials_non_expired': 'bool',
        'customer_key': 'str',
        'display_username': 'bool',
        'email': 'str',
        'enabled': 'bool',
        'external_id': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'gender': 'str',
        'hand': 'str',
        'id': 'int',
        'image_url': 'str',
        'is_valid_email': 'bool',
        'is_valid_phone': 'bool',
        'iso_code': 'str',
        'last_name': 'str',
        'lucra_connected': 'bool',
        'media_id': 'int',
        'nickname': 'str',
        'password': 'str',
        'phone_number': 'str',
        'referral_code': 'str',
        'reliability_score': 'int',
        'restricted': 'bool',
        'role': 'Role',
        'secret': 'str',
        'status': 'str',
        'username': 'str'
    }

    attribute_map = {
        'account_non_expired': 'accountNonExpired',
        'account_non_locked': 'accountNonLocked',
        'admin': 'admin',
        'authorities': 'authorities',
        'birthdate': 'birthdate',
        'created': 'created',
        'credentials_non_expired': 'credentialsNonExpired',
        'customer_key': 'customerKey',
        'display_username': 'displayUsername',
        'email': 'email',
        'enabled': 'enabled',
        'external_id': 'externalId',
        'first_name': 'firstName',
        'full_name': 'fullName',
        'gender': 'gender',
        'hand': 'hand',
        'id': 'id',
        'image_url': 'imageUrl',
        'is_valid_email': 'isValidEmail',
        'is_valid_phone': 'isValidPhone',
        'iso_code': 'isoCode',
        'last_name': 'lastName',
        'lucra_connected': 'lucraConnected',
        'media_id': 'mediaId',
        'nickname': 'nickname',
        'password': 'password',
        'phone_number': 'phoneNumber',
        'referral_code': 'referralCode',
        'reliability_score': 'reliabilityScore',
        'restricted': 'restricted',
        'role': 'role',
        'secret': 'secret',
        'status': 'status',
        'username': 'username'
    }

    def __init__(self, account_non_expired=None, account_non_locked=None, admin=None, authorities=None, birthdate=None, created=None, credentials_non_expired=None, customer_key=None, display_username=None, email=None, enabled=None, external_id=None, first_name=None, full_name=None, gender=None, hand=None, id=None, image_url=None, is_valid_email=None, is_valid_phone=None, iso_code=None, last_name=None, lucra_connected=None, media_id=None, nickname=None, password=None, phone_number=None, referral_code=None, reliability_score=None, restricted=None, role=None, secret=None, status=None, username=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._account_non_expired = None
        self._account_non_locked = None
        self._admin = None
        self._authorities = None
        self._birthdate = None
        self._created = None
        self._credentials_non_expired = None
        self._customer_key = None
        self._display_username = None
        self._email = None
        self._enabled = None
        self._external_id = None
        self._first_name = None
        self._full_name = None
        self._gender = None
        self._hand = None
        self._id = None
        self._image_url = None
        self._is_valid_email = None
        self._is_valid_phone = None
        self._iso_code = None
        self._last_name = None
        self._lucra_connected = None
        self._media_id = None
        self._nickname = None
        self._password = None
        self._phone_number = None
        self._referral_code = None
        self._reliability_score = None
        self._restricted = None
        self._role = None
        self._secret = None
        self._status = None
        self._username = None
        self.discriminator = None
        self.account_non_expired = account_non_expired
        self.account_non_locked = account_non_locked
        self.admin = admin
        self.authorities = authorities
        if birthdate is not None:
            self.birthdate = birthdate
        if created is not None:
            self.created = created
        self.credentials_non_expired = credentials_non_expired
        if customer_key is not None:
            self.customer_key = customer_key
        self.display_username = display_username
        self.email = email
        self.enabled = enabled
        if external_id is not None:
            self.external_id = external_id
        if first_name is not None:
            self.first_name = first_name
        self.full_name = full_name
        if gender is not None:
            self.gender = gender
        if hand is not None:
            self.hand = hand
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if is_valid_email is not None:
            self.is_valid_email = is_valid_email
        if is_valid_phone is not None:
            self.is_valid_phone = is_valid_phone
        if iso_code is not None:
            self.iso_code = iso_code
        if last_name is not None:
            self.last_name = last_name
        if lucra_connected is not None:
            self.lucra_connected = lucra_connected
        if media_id is not None:
            self.media_id = media_id
        if nickname is not None:
            self.nickname = nickname
        self.password = password
        if phone_number is not None:
            self.phone_number = phone_number
        if referral_code is not None:
            self.referral_code = referral_code
        if reliability_score is not None:
            self.reliability_score = reliability_score
        if restricted is not None:
            self.restricted = restricted
        if role is not None:
            self.role = role
        if secret is not None:
            self.secret = secret
        if status is not None:
            self.status = status
        self.username = username

    @property
    def account_non_expired(self):
        """Gets the account_non_expired of this User.  # noqa: E501


        :return: The account_non_expired of this User.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_expired

    @account_non_expired.setter
    def account_non_expired(self, account_non_expired):
        """Sets the account_non_expired of this User.


        :param account_non_expired: The account_non_expired of this User.  # noqa: E501
        :type: bool
        """
        if account_non_expired is None:
            raise ValueError("Invalid value for `account_non_expired`, must not be `None`")  # noqa: E501

        self._account_non_expired = account_non_expired

    @property
    def account_non_locked(self):
        """Gets the account_non_locked of this User.  # noqa: E501


        :return: The account_non_locked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_locked

    @account_non_locked.setter
    def account_non_locked(self, account_non_locked):
        """Sets the account_non_locked of this User.


        :param account_non_locked: The account_non_locked of this User.  # noqa: E501
        :type: bool
        """
        if account_non_locked is None:
            raise ValueError("Invalid value for `account_non_locked`, must not be `None`")  # noqa: E501

        self._account_non_locked = account_non_locked

    @property
    def admin(self):
        """Gets the admin of this User.  # noqa: E501


        :return: The admin of this User.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this User.


        :param admin: The admin of this User.  # noqa: E501
        :type: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    @property
    def authorities(self):
        """Gets the authorities of this User.  # noqa: E501


        :return: The authorities of this User.  # noqa: E501
        :rtype: list[GrantedAuthority]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """Sets the authorities of this User.


        :param authorities: The authorities of this User.  # noqa: E501
        :type: list[GrantedAuthority]
        """
        if authorities is None:
            raise ValueError("Invalid value for `authorities`, must not be `None`")  # noqa: E501

        self._authorities = authorities

    @property
    def birthdate(self):
        """Gets the birthdate of this User.  # noqa: E501


        :return: The birthdate of this User.  # noqa: E501
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this User.


        :param birthdate: The birthdate of this User.  # noqa: E501
        :type: date
        """

        self._birthdate = birthdate

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501


        :return: The created of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def credentials_non_expired(self):
        """Gets the credentials_non_expired of this User.  # noqa: E501


        :return: The credentials_non_expired of this User.  # noqa: E501
        :rtype: bool
        """
        return self._credentials_non_expired

    @credentials_non_expired.setter
    def credentials_non_expired(self, credentials_non_expired):
        """Sets the credentials_non_expired of this User.


        :param credentials_non_expired: The credentials_non_expired of this User.  # noqa: E501
        :type: bool
        """
        if credentials_non_expired is None:
            raise ValueError("Invalid value for `credentials_non_expired`, must not be `None`")  # noqa: E501

        self._credentials_non_expired = credentials_non_expired

    @property
    def customer_key(self):
        """Gets the customer_key of this User.  # noqa: E501


        :return: The customer_key of this User.  # noqa: E501
        :rtype: str
        """
        return self._customer_key

    @customer_key.setter
    def customer_key(self, customer_key):
        """Sets the customer_key of this User.


        :param customer_key: The customer_key of this User.  # noqa: E501
        :type: str
        """

        self._customer_key = customer_key

    @property
    def display_username(self):
        """Gets the display_username of this User.  # noqa: E501


        :return: The display_username of this User.  # noqa: E501
        :rtype: bool
        """
        return self._display_username

    @display_username.setter
    def display_username(self, display_username):
        """Sets the display_username of this User.


        :param display_username: The display_username of this User.  # noqa: E501
        :type: bool
        """
        if display_username is None:
            raise ValueError("Invalid value for `display_username`, must not be `None`")  # noqa: E501

        self._display_username = display_username

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501


        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.


        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def external_id(self):
        """Gets the external_id of this User.  # noqa: E501


        :return: The external_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.


        :param external_id: The external_id of this User.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501


        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this User.  # noqa: E501


        :return: The gender of this User.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this User.


        :param gender: The gender of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hand(self):
        """Gets the hand of this User.  # noqa: E501


        :return: The hand of this User.  # noqa: E501
        :rtype: str
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this User.


        :param hand: The hand of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOTH", "LEFT", "NONE", "RIGHT"]  # noqa: E501
        if hand not in allowed_values:
            raise ValueError(
                "Invalid value for `hand` ({0}), must be one of {1}"  # noqa: E501
                .format(hand, allowed_values)
            )

        self._hand = hand

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this User.  # noqa: E501


        :return: The image_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this User.


        :param image_url: The image_url of this User.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def is_valid_email(self):
        """Gets the is_valid_email of this User.  # noqa: E501


        :return: The is_valid_email of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_email

    @is_valid_email.setter
    def is_valid_email(self, is_valid_email):
        """Sets the is_valid_email of this User.


        :param is_valid_email: The is_valid_email of this User.  # noqa: E501
        :type: bool
        """

        self._is_valid_email = is_valid_email

    @property
    def is_valid_phone(self):
        """Gets the is_valid_phone of this User.  # noqa: E501


        :return: The is_valid_phone of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_phone

    @is_valid_phone.setter
    def is_valid_phone(self, is_valid_phone):
        """Sets the is_valid_phone of this User.


        :param is_valid_phone: The is_valid_phone of this User.  # noqa: E501
        :type: bool
        """

        self._is_valid_phone = is_valid_phone

    @property
    def iso_code(self):
        """Gets the iso_code of this User.  # noqa: E501


        :return: The iso_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this User.


        :param iso_code: The iso_code of this User.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def lucra_connected(self):
        """Gets the lucra_connected of this User.  # noqa: E501


        :return: The lucra_connected of this User.  # noqa: E501
        :rtype: bool
        """
        return self._lucra_connected

    @lucra_connected.setter
    def lucra_connected(self, lucra_connected):
        """Sets the lucra_connected of this User.


        :param lucra_connected: The lucra_connected of this User.  # noqa: E501
        :type: bool
        """

        self._lucra_connected = lucra_connected

    @property
    def media_id(self):
        """Gets the media_id of this User.  # noqa: E501


        :return: The media_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this User.


        :param media_id: The media_id of this User.  # noqa: E501
        :type: int
        """

        self._media_id = media_id

    @property
    def nickname(self):
        """Gets the nickname of this User.  # noqa: E501


        :return: The nickname of this User.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this User.


        :param nickname: The nickname of this User.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501


        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def phone_number(self):
        """Gets the phone_number of this User.  # noqa: E501


        :return: The phone_number of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this User.


        :param phone_number: The phone_number of this User.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def referral_code(self):
        """Gets the referral_code of this User.  # noqa: E501


        :return: The referral_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._referral_code

    @referral_code.setter
    def referral_code(self, referral_code):
        """Sets the referral_code of this User.


        :param referral_code: The referral_code of this User.  # noqa: E501
        :type: str
        """

        self._referral_code = referral_code

    @property
    def reliability_score(self):
        """Gets the reliability_score of this User.  # noqa: E501


        :return: The reliability_score of this User.  # noqa: E501
        :rtype: int
        """
        return self._reliability_score

    @reliability_score.setter
    def reliability_score(self, reliability_score):
        """Sets the reliability_score of this User.


        :param reliability_score: The reliability_score of this User.  # noqa: E501
        :type: int
        """

        self._reliability_score = reliability_score

    @property
    def restricted(self):
        """Gets the restricted of this User.  # noqa: E501


        :return: The restricted of this User.  # noqa: E501
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """Sets the restricted of this User.


        :param restricted: The restricted of this User.  # noqa: E501
        :type: bool
        """

        self._restricted = restricted

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501


        :return: The role of this User.  # noqa: E501
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.


        :param role: The role of this User.  # noqa: E501
        :type: Role
        """

        self._role = role

    @property
    def secret(self):
        """Gets the secret of this User.  # noqa: E501


        :return: The secret of this User.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this User.


        :param secret: The secret of this User.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501


        :return: The status of this User.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.


        :param status: The status of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
