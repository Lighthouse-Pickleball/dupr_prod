# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalMatchSearchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dupr_id': 'str',
        'end_date': 'int',
        'event_format': 'list[str]',
        'limit': 'int',
        'offset': 'int',
        'start_date': 'int'
    }

    attribute_map = {
        'dupr_id': 'duprId',
        'end_date': 'endDate',
        'event_format': 'eventFormat',
        'limit': 'limit',
        'offset': 'offset',
        'start_date': 'startDate'
    }

    def __init__(self, dupr_id=None, end_date=None, event_format=None, limit=None, offset=None, start_date=None):  # noqa: E501
        """ExternalMatchSearchRequest - a model defined in Swagger"""  # noqa: E501
        self._dupr_id = None
        self._end_date = None
        self._event_format = None
        self._limit = None
        self._offset = None
        self._start_date = None
        self.discriminator = None
        if dupr_id is not None:
            self.dupr_id = dupr_id
        self.end_date = end_date
        if event_format is not None:
            self.event_format = event_format
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        self.start_date = start_date

    @property
    def dupr_id(self):
        """Gets the dupr_id of this ExternalMatchSearchRequest.  # noqa: E501


        :return: The dupr_id of this ExternalMatchSearchRequest.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this ExternalMatchSearchRequest.


        :param dupr_id: The dupr_id of this ExternalMatchSearchRequest.  # noqa: E501
        :type: str
        """

        self._dupr_id = dupr_id

    @property
    def end_date(self):
        """Gets the end_date of this ExternalMatchSearchRequest.  # noqa: E501

        The end date in epoch seconds  # noqa: E501

        :return: The end_date of this ExternalMatchSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ExternalMatchSearchRequest.

        The end date in epoch seconds  # noqa: E501

        :param end_date: The end_date of this ExternalMatchSearchRequest.  # noqa: E501
        :type: int
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def event_format(self):
        """Gets the event_format of this ExternalMatchSearchRequest.  # noqa: E501


        :return: The event_format of this ExternalMatchSearchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_format

    @event_format.setter
    def event_format(self, event_format):
        """Sets the event_format of this ExternalMatchSearchRequest.


        :param event_format: The event_format of this ExternalMatchSearchRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if not set(event_format).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_format` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(event_format) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._event_format = event_format

    @property
    def limit(self):
        """Gets the limit of this ExternalMatchSearchRequest.  # noqa: E501


        :return: The limit of this ExternalMatchSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ExternalMatchSearchRequest.


        :param limit: The limit of this ExternalMatchSearchRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ExternalMatchSearchRequest.  # noqa: E501


        :return: The offset of this ExternalMatchSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ExternalMatchSearchRequest.


        :param offset: The offset of this ExternalMatchSearchRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def start_date(self):
        """Gets the start_date of this ExternalMatchSearchRequest.  # noqa: E501

        The start date in epoch seconds  # noqa: E501

        :return: The start_date of this ExternalMatchSearchRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ExternalMatchSearchRequest.

        The start date in epoch seconds  # noqa: E501

        :param start_date: The start_date of this ExternalMatchSearchRequest.  # noqa: E501
        :type: int
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalMatchSearchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalMatchSearchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
