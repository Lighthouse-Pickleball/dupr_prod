# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalUpdateMatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bracket': 'str',
        'club_id': 'int',
        'event': 'str',
        'extras': 'dict(str, str)',
        'format': 'str',
        'identifier': 'str',
        'location': 'str',
        'match_date': 'date',
        'match_id': 'int',
        'match_source': 'str',
        'match_type': 'str',
        'team_a': 'ExternalMatchTeam',
        'team_b': 'ExternalMatchTeam'
    }

    attribute_map = {
        'bracket': 'bracket',
        'club_id': 'clubId',
        'event': 'event',
        'extras': 'extras',
        'format': 'format',
        'identifier': 'identifier',
        'location': 'location',
        'match_date': 'matchDate',
        'match_id': 'matchId',
        'match_source': 'matchSource',
        'match_type': 'matchType',
        'team_a': 'teamA',
        'team_b': 'teamB'
    }

    def __init__(self, bracket=None, club_id=None, event=None, extras=None, format=None, identifier=None, location=None, match_date=None, match_id=None, match_source=None, match_type=None, team_a=None, team_b=None):  # noqa: E501
        """ExternalUpdateMatchRequest - a model defined in Swagger"""  # noqa: E501
        self._bracket = None
        self._club_id = None
        self._event = None
        self._extras = None
        self._format = None
        self._identifier = None
        self._location = None
        self._match_date = None
        self._match_id = None
        self._match_source = None
        self._match_type = None
        self._team_a = None
        self._team_b = None
        self.discriminator = None
        if bracket is not None:
            self.bracket = bracket
        if club_id is not None:
            self.club_id = club_id
        self.event = event
        if extras is not None:
            self.extras = extras
        self.format = format
        self.identifier = identifier
        if location is not None:
            self.location = location
        self.match_date = match_date
        self.match_id = match_id
        if match_source is not None:
            self.match_source = match_source
        if match_type is not None:
            self.match_type = match_type
        self.team_a = team_a
        self.team_b = team_b

    @property
    def bracket(self):
        """Gets the bracket of this ExternalUpdateMatchRequest.  # noqa: E501

        Bracket name in which this match was played  # noqa: E501

        :return: The bracket of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._bracket

    @bracket.setter
    def bracket(self, bracket):
        """Sets the bracket of this ExternalUpdateMatchRequest.

        Bracket name in which this match was played  # noqa: E501

        :param bracket: The bracket of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """

        self._bracket = bracket

    @property
    def club_id(self):
        """Gets the club_id of this ExternalUpdateMatchRequest.  # noqa: E501

        DUPR Club unique identifier  # noqa: E501

        :return: The club_id of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._club_id

    @club_id.setter
    def club_id(self, club_id):
        """Sets the club_id of this ExternalUpdateMatchRequest.

        DUPR Club unique identifier  # noqa: E501

        :param club_id: The club_id of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: int
        """

        self._club_id = club_id

    @property
    def event(self):
        """Gets the event of this ExternalUpdateMatchRequest.  # noqa: E501

        Event name in which this match was played  # noqa: E501

        :return: The event of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this ExternalUpdateMatchRequest.

        Event name in which this match was played  # noqa: E501

        :param event: The event of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def extras(self):
        """Gets the extras of this ExternalUpdateMatchRequest.  # noqa: E501

        Extra parameters in key value pairs  # noqa: E501

        :return: The extras of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extras

    @extras.setter
    def extras(self, extras):
        """Sets the extras of this ExternalUpdateMatchRequest.

        Extra parameters in key value pairs  # noqa: E501

        :param extras: The extras of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._extras = extras

    @property
    def format(self):
        """Gets the format of this ExternalUpdateMatchRequest.  # noqa: E501

        Match format Singles or Doubles  # noqa: E501

        :return: The format of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ExternalUpdateMatchRequest.

        Match format Singles or Doubles  # noqa: E501

        :param format: The format of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def identifier(self):
        """Gets the identifier of this ExternalUpdateMatchRequest.  # noqa: E501

        An unique identifier for this match  # noqa: E501

        :return: The identifier of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ExternalUpdateMatchRequest.

        An unique identifier for this match  # noqa: E501

        :param identifier: The identifier of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def location(self):
        """Gets the location of this ExternalUpdateMatchRequest.  # noqa: E501


        :return: The location of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ExternalUpdateMatchRequest.


        :param location: The location of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def match_date(self):
        """Gets the match_date of this ExternalUpdateMatchRequest.  # noqa: E501

        Match date must be in ISO 8061 format date i.e. yyyy-MM-dd  # noqa: E501

        :return: The match_date of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: date
        """
        return self._match_date

    @match_date.setter
    def match_date(self, match_date):
        """Sets the match_date of this ExternalUpdateMatchRequest.

        Match date must be in ISO 8061 format date i.e. yyyy-MM-dd  # noqa: E501

        :param match_date: The match_date of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: date
        """
        if match_date is None:
            raise ValueError("Invalid value for `match_date`, must not be `None`")  # noqa: E501

        self._match_date = match_date

    @property
    def match_id(self):
        """Gets the match_id of this ExternalUpdateMatchRequest.  # noqa: E501


        :return: The match_id of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this ExternalUpdateMatchRequest.


        :param match_id: The match_id of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: int
        """
        if match_id is None:
            raise ValueError("Invalid value for `match_id`, must not be `None`")  # noqa: E501

        self._match_id = match_id

    @property
    def match_source(self):
        """Gets the match_source of this ExternalUpdateMatchRequest.  # noqa: E501

        Match source can be a value between CLUB or DUPR  # noqa: E501

        :return: The match_source of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_source

    @match_source.setter
    def match_source(self, match_source):
        """Sets the match_source of this ExternalUpdateMatchRequest.

        Match source can be a value between CLUB or DUPR  # noqa: E501

        :param match_source: The match_source of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUB", "DUPR", "LEAGUE", "PARTNER"]  # noqa: E501
        if match_source not in allowed_values:
            raise ValueError(
                "Invalid value for `match_source` ({0}), must be one of {1}"  # noqa: E501
                .format(match_source, allowed_values)
            )

        self._match_source = match_source

    @property
    def match_type(self):
        """Gets the match_type of this ExternalUpdateMatchRequest.  # noqa: E501

        MatchTypes can be a value between RALLY or SIDEOUT  # noqa: E501

        :return: The match_type of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this ExternalUpdateMatchRequest.

        MatchTypes can be a value between RALLY or SIDEOUT  # noqa: E501

        :param match_type: The match_type of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["RALLY", "SIDEOUT"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def team_a(self):
        """Gets the team_a of this ExternalUpdateMatchRequest.  # noqa: E501


        :return: The team_a of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: ExternalMatchTeam
        """
        return self._team_a

    @team_a.setter
    def team_a(self, team_a):
        """Sets the team_a of this ExternalUpdateMatchRequest.


        :param team_a: The team_a of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: ExternalMatchTeam
        """
        if team_a is None:
            raise ValueError("Invalid value for `team_a`, must not be `None`")  # noqa: E501

        self._team_a = team_a

    @property
    def team_b(self):
        """Gets the team_b of this ExternalUpdateMatchRequest.  # noqa: E501


        :return: The team_b of this ExternalUpdateMatchRequest.  # noqa: E501
        :rtype: ExternalMatchTeam
        """
        return self._team_b

    @team_b.setter
    def team_b(self, team_b):
        """Sets the team_b of this ExternalUpdateMatchRequest.


        :param team_b: The team_b of this ExternalUpdateMatchRequest.  # noqa: E501
        :type: ExternalMatchTeam
        """
        if team_b is None:
            raise ValueError("Invalid value for `team_b`, must not be `None`")  # noqa: E501

        self._team_b = team_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalUpdateMatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalUpdateMatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
