# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Participant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'club_member': 'bool',
        'display_username': 'bool',
        'full_name': 'str',
        'id': 'int',
        'is_registered': 'bool',
        'is_substitute': 'bool',
        'is_wait_listed': 'bool',
        'partner_status': 'str',
        'payment_due': 'str',
        'payment_refunded': 'bool',
        'payment_status': 'str',
        'refund_amount': 'float',
        'status': 'str',
        'username': 'str'
    }

    attribute_map = {
        'club_member': 'clubMember',
        'display_username': 'displayUsername',
        'full_name': 'fullName',
        'id': 'id',
        'is_registered': 'isRegistered',
        'is_substitute': 'isSubstitute',
        'is_wait_listed': 'isWaitListed',
        'partner_status': 'partnerStatus',
        'payment_due': 'paymentDue',
        'payment_refunded': 'paymentRefunded',
        'payment_status': 'paymentStatus',
        'refund_amount': 'refundAmount',
        'status': 'status',
        'username': 'username'
    }

    def __init__(self, club_member=None, display_username=None, full_name=None, id=None, is_registered=None, is_substitute=None, is_wait_listed=None, partner_status=None, payment_due=None, payment_refunded=None, payment_status=None, refund_amount=None, status=None, username=None):  # noqa: E501
        """Participant - a model defined in Swagger"""  # noqa: E501
        self._club_member = None
        self._display_username = None
        self._full_name = None
        self._id = None
        self._is_registered = None
        self._is_substitute = None
        self._is_wait_listed = None
        self._partner_status = None
        self._payment_due = None
        self._payment_refunded = None
        self._payment_status = None
        self._refund_amount = None
        self._status = None
        self._username = None
        self.discriminator = None
        self.club_member = club_member
        if display_username is not None:
            self.display_username = display_username
        self.full_name = full_name
        if id is not None:
            self.id = id
        if is_registered is not None:
            self.is_registered = is_registered
        self.is_substitute = is_substitute
        self.is_wait_listed = is_wait_listed
        if partner_status is not None:
            self.partner_status = partner_status
        if payment_due is not None:
            self.payment_due = payment_due
        self.payment_refunded = payment_refunded
        if payment_status is not None:
            self.payment_status = payment_status
        self.refund_amount = refund_amount
        if status is not None:
            self.status = status
        if username is not None:
            self.username = username

    @property
    def club_member(self):
        """Gets the club_member of this Participant.  # noqa: E501


        :return: The club_member of this Participant.  # noqa: E501
        :rtype: bool
        """
        return self._club_member

    @club_member.setter
    def club_member(self, club_member):
        """Sets the club_member of this Participant.


        :param club_member: The club_member of this Participant.  # noqa: E501
        :type: bool
        """
        if club_member is None:
            raise ValueError("Invalid value for `club_member`, must not be `None`")  # noqa: E501

        self._club_member = club_member

    @property
    def display_username(self):
        """Gets the display_username of this Participant.  # noqa: E501


        :return: The display_username of this Participant.  # noqa: E501
        :rtype: bool
        """
        return self._display_username

    @display_username.setter
    def display_username(self, display_username):
        """Sets the display_username of this Participant.


        :param display_username: The display_username of this Participant.  # noqa: E501
        :type: bool
        """

        self._display_username = display_username

    @property
    def full_name(self):
        """Gets the full_name of this Participant.  # noqa: E501


        :return: The full_name of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Participant.


        :param full_name: The full_name of this Participant.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this Participant.  # noqa: E501


        :return: The id of this Participant.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Participant.


        :param id: The id of this Participant.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_registered(self):
        """Gets the is_registered of this Participant.  # noqa: E501


        :return: The is_registered of this Participant.  # noqa: E501
        :rtype: bool
        """
        return self._is_registered

    @is_registered.setter
    def is_registered(self, is_registered):
        """Sets the is_registered of this Participant.


        :param is_registered: The is_registered of this Participant.  # noqa: E501
        :type: bool
        """

        self._is_registered = is_registered

    @property
    def is_substitute(self):
        """Gets the is_substitute of this Participant.  # noqa: E501


        :return: The is_substitute of this Participant.  # noqa: E501
        :rtype: bool
        """
        return self._is_substitute

    @is_substitute.setter
    def is_substitute(self, is_substitute):
        """Sets the is_substitute of this Participant.


        :param is_substitute: The is_substitute of this Participant.  # noqa: E501
        :type: bool
        """
        if is_substitute is None:
            raise ValueError("Invalid value for `is_substitute`, must not be `None`")  # noqa: E501

        self._is_substitute = is_substitute

    @property
    def is_wait_listed(self):
        """Gets the is_wait_listed of this Participant.  # noqa: E501


        :return: The is_wait_listed of this Participant.  # noqa: E501
        :rtype: bool
        """
        return self._is_wait_listed

    @is_wait_listed.setter
    def is_wait_listed(self, is_wait_listed):
        """Sets the is_wait_listed of this Participant.


        :param is_wait_listed: The is_wait_listed of this Participant.  # noqa: E501
        :type: bool
        """
        if is_wait_listed is None:
            raise ValueError("Invalid value for `is_wait_listed`, must not be `None`")  # noqa: E501

        self._is_wait_listed = is_wait_listed

    @property
    def partner_status(self):
        """Gets the partner_status of this Participant.  # noqa: E501


        :return: The partner_status of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._partner_status

    @partner_status.setter
    def partner_status(self, partner_status):
        """Sets the partner_status of this Participant.


        :param partner_status: The partner_status of this Participant.  # noqa: E501
        :type: str
        """

        self._partner_status = partner_status

    @property
    def payment_due(self):
        """Gets the payment_due of this Participant.  # noqa: E501


        :return: The payment_due of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._payment_due

    @payment_due.setter
    def payment_due(self, payment_due):
        """Sets the payment_due of this Participant.


        :param payment_due: The payment_due of this Participant.  # noqa: E501
        :type: str
        """

        self._payment_due = payment_due

    @property
    def payment_refunded(self):
        """Gets the payment_refunded of this Participant.  # noqa: E501


        :return: The payment_refunded of this Participant.  # noqa: E501
        :rtype: bool
        """
        return self._payment_refunded

    @payment_refunded.setter
    def payment_refunded(self, payment_refunded):
        """Sets the payment_refunded of this Participant.


        :param payment_refunded: The payment_refunded of this Participant.  # noqa: E501
        :type: bool
        """
        if payment_refunded is None:
            raise ValueError("Invalid value for `payment_refunded`, must not be `None`")  # noqa: E501

        self._payment_refunded = payment_refunded

    @property
    def payment_status(self):
        """Gets the payment_status of this Participant.  # noqa: E501


        :return: The payment_status of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this Participant.


        :param payment_status: The payment_status of this Participant.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if payment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_status, allowed_values)
            )

        self._payment_status = payment_status

    @property
    def refund_amount(self):
        """Gets the refund_amount of this Participant.  # noqa: E501


        :return: The refund_amount of this Participant.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this Participant.


        :param refund_amount: The refund_amount of this Participant.  # noqa: E501
        :type: float
        """
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    @property
    def status(self):
        """Gets the status of this Participant.  # noqa: E501


        :return: The status of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Participant.


        :param status: The status of this Participant.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def username(self):
        """Gets the username of this Participant.  # noqa: E501


        :return: The username of this Participant.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Participant.


        :param username: The username of this Participant.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Participant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Participant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
