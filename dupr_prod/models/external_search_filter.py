# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalSearchFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'ExternalAgeRangeFilter',
        'gender': 'str',
        'location': 'ExternalFilterLocation',
        'rating': 'ExternalRatingFilter'
    }

    attribute_map = {
        'age': 'age',
        'gender': 'gender',
        'location': 'location',
        'rating': 'rating'
    }

    def __init__(self, age=None, gender=None, location=None, rating=None):  # noqa: E501
        """ExternalSearchFilter - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._gender = None
        self._location = None
        self._rating = None
        self.discriminator = None
        if age is not None:
            self.age = age
        if gender is not None:
            self.gender = gender
        if location is not None:
            self.location = location
        if rating is not None:
            self.rating = rating

    @property
    def age(self):
        """Gets the age of this ExternalSearchFilter.  # noqa: E501


        :return: The age of this ExternalSearchFilter.  # noqa: E501
        :rtype: ExternalAgeRangeFilter
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this ExternalSearchFilter.


        :param age: The age of this ExternalSearchFilter.  # noqa: E501
        :type: ExternalAgeRangeFilter
        """

        self._age = age

    @property
    def gender(self):
        """Gets the gender of this ExternalSearchFilter.  # noqa: E501

        Value must be exact match from the following array.  # noqa: E501

        :return: The gender of this ExternalSearchFilter.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ExternalSearchFilter.

        Value must be exact match from the following array.  # noqa: E501

        :param gender: The gender of this ExternalSearchFilter.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def location(self):
        """Gets the location of this ExternalSearchFilter.  # noqa: E501


        :return: The location of this ExternalSearchFilter.  # noqa: E501
        :rtype: ExternalFilterLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ExternalSearchFilter.


        :param location: The location of this ExternalSearchFilter.  # noqa: E501
        :type: ExternalFilterLocation
        """

        self._location = location

    @property
    def rating(self):
        """Gets the rating of this ExternalSearchFilter.  # noqa: E501


        :return: The rating of this ExternalSearchFilter.  # noqa: E501
        :rtype: ExternalRatingFilter
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this ExternalSearchFilter.


        :param rating: The rating of this ExternalSearchFilter.  # noqa: E501
        :type: ExternalRatingFilter
        """

        self._rating = rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalSearchFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalSearchFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
