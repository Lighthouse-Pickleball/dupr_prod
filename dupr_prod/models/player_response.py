# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'display_username': 'bool',
        'distance': 'str',
        'distance_in_miles': 'float',
        'dupr_id': 'str',
        'email': 'str',
        'enable_privacy': 'bool',
        'first_name': 'str',
        'formatted_address': 'str',
        'full_name': 'str',
        'gender': 'str',
        'hand': 'str',
        'id': 'int',
        'image_url': 'str',
        'invited': 'bool',
        'is_logged_in_user': 'bool',
        'is_player1': 'bool',
        'is_substitute': 'bool',
        'last_name': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'lucra_connected': 'bool',
        'partner_status': 'str',
        'phone': 'str',
        'ratings': 'PlayerRatingResponse',
        'registered': 'bool',
        'registration_details': 'RegistrationResponse',
        'registration_type': 'str',
        'short_address': 'str',
        'show_rating_banner': 'bool',
        'sponsor': 'SponsorLogoResponse',
        'status': 'str',
        'substitution_details': 'list[PlayerResponse]',
        'team_status': 'str',
        'username': 'str',
        'verified_email': 'bool'
    }

    attribute_map = {
        'age': 'age',
        'display_username': 'displayUsername',
        'distance': 'distance',
        'distance_in_miles': 'distanceInMiles',
        'dupr_id': 'duprId',
        'email': 'email',
        'enable_privacy': 'enablePrivacy',
        'first_name': 'firstName',
        'formatted_address': 'formattedAddress',
        'full_name': 'fullName',
        'gender': 'gender',
        'hand': 'hand',
        'id': 'id',
        'image_url': 'imageUrl',
        'invited': 'invited',
        'is_logged_in_user': 'isLoggedInUser',
        'is_player1': 'isPlayer1',
        'is_substitute': 'isSubstitute',
        'last_name': 'lastName',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'lucra_connected': 'lucraConnected',
        'partner_status': 'partnerStatus',
        'phone': 'phone',
        'ratings': 'ratings',
        'registered': 'registered',
        'registration_details': 'registrationDetails',
        'registration_type': 'registrationType',
        'short_address': 'shortAddress',
        'show_rating_banner': 'showRatingBanner',
        'sponsor': 'sponsor',
        'status': 'status',
        'substitution_details': 'substitutionDetails',
        'team_status': 'teamStatus',
        'username': 'username',
        'verified_email': 'verifiedEmail'
    }

    def __init__(self, age=None, display_username=None, distance=None, distance_in_miles=None, dupr_id=None, email=None, enable_privacy=None, first_name=None, formatted_address=None, full_name=None, gender=None, hand=None, id=None, image_url=None, invited=None, is_logged_in_user=None, is_player1=None, is_substitute=None, last_name=None, latitude=None, longitude=None, lucra_connected=None, partner_status=None, phone=None, ratings=None, registered=None, registration_details=None, registration_type=None, short_address=None, show_rating_banner=None, sponsor=None, status=None, substitution_details=None, team_status=None, username=None, verified_email=None):  # noqa: E501
        """PlayerResponse - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._display_username = None
        self._distance = None
        self._distance_in_miles = None
        self._dupr_id = None
        self._email = None
        self._enable_privacy = None
        self._first_name = None
        self._formatted_address = None
        self._full_name = None
        self._gender = None
        self._hand = None
        self._id = None
        self._image_url = None
        self._invited = None
        self._is_logged_in_user = None
        self._is_player1 = None
        self._is_substitute = None
        self._last_name = None
        self._latitude = None
        self._longitude = None
        self._lucra_connected = None
        self._partner_status = None
        self._phone = None
        self._ratings = None
        self._registered = None
        self._registration_details = None
        self._registration_type = None
        self._short_address = None
        self._show_rating_banner = None
        self._sponsor = None
        self._status = None
        self._substitution_details = None
        self._team_status = None
        self._username = None
        self._verified_email = None
        self.discriminator = None
        if age is not None:
            self.age = age
        if display_username is not None:
            self.display_username = display_username
        if distance is not None:
            self.distance = distance
        if distance_in_miles is not None:
            self.distance_in_miles = distance_in_miles
        self.dupr_id = dupr_id
        if email is not None:
            self.email = email
        if enable_privacy is not None:
            self.enable_privacy = enable_privacy
        if first_name is not None:
            self.first_name = first_name
        if formatted_address is not None:
            self.formatted_address = formatted_address
        self.full_name = full_name
        if gender is not None:
            self.gender = gender
        if hand is not None:
            self.hand = hand
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if invited is not None:
            self.invited = invited
        if is_logged_in_user is not None:
            self.is_logged_in_user = is_logged_in_user
        if is_player1 is not None:
            self.is_player1 = is_player1
        if is_substitute is not None:
            self.is_substitute = is_substitute
        if last_name is not None:
            self.last_name = last_name
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if lucra_connected is not None:
            self.lucra_connected = lucra_connected
        if partner_status is not None:
            self.partner_status = partner_status
        if phone is not None:
            self.phone = phone
        if ratings is not None:
            self.ratings = ratings
        self.registered = registered
        if registration_details is not None:
            self.registration_details = registration_details
        if registration_type is not None:
            self.registration_type = registration_type
        if short_address is not None:
            self.short_address = short_address
        if show_rating_banner is not None:
            self.show_rating_banner = show_rating_banner
        if sponsor is not None:
            self.sponsor = sponsor
        if status is not None:
            self.status = status
        if substitution_details is not None:
            self.substitution_details = substitution_details
        if team_status is not None:
            self.team_status = team_status
        if username is not None:
            self.username = username
        if verified_email is not None:
            self.verified_email = verified_email

    @property
    def age(self):
        """Gets the age of this PlayerResponse.  # noqa: E501


        :return: The age of this PlayerResponse.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this PlayerResponse.


        :param age: The age of this PlayerResponse.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def display_username(self):
        """Gets the display_username of this PlayerResponse.  # noqa: E501


        :return: The display_username of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._display_username

    @display_username.setter
    def display_username(self, display_username):
        """Sets the display_username of this PlayerResponse.


        :param display_username: The display_username of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._display_username = display_username

    @property
    def distance(self):
        """Gets the distance of this PlayerResponse.  # noqa: E501


        :return: The distance of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this PlayerResponse.


        :param distance: The distance of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._distance = distance

    @property
    def distance_in_miles(self):
        """Gets the distance_in_miles of this PlayerResponse.  # noqa: E501


        :return: The distance_in_miles of this PlayerResponse.  # noqa: E501
        :rtype: float
        """
        return self._distance_in_miles

    @distance_in_miles.setter
    def distance_in_miles(self, distance_in_miles):
        """Sets the distance_in_miles of this PlayerResponse.


        :param distance_in_miles: The distance_in_miles of this PlayerResponse.  # noqa: E501
        :type: float
        """

        self._distance_in_miles = distance_in_miles

    @property
    def dupr_id(self):
        """Gets the dupr_id of this PlayerResponse.  # noqa: E501


        :return: The dupr_id of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._dupr_id

    @dupr_id.setter
    def dupr_id(self, dupr_id):
        """Sets the dupr_id of this PlayerResponse.


        :param dupr_id: The dupr_id of this PlayerResponse.  # noqa: E501
        :type: str
        """
        if dupr_id is None:
            raise ValueError("Invalid value for `dupr_id`, must not be `None`")  # noqa: E501

        self._dupr_id = dupr_id

    @property
    def email(self):
        """Gets the email of this PlayerResponse.  # noqa: E501


        :return: The email of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PlayerResponse.


        :param email: The email of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enable_privacy(self):
        """Gets the enable_privacy of this PlayerResponse.  # noqa: E501


        :return: The enable_privacy of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_privacy

    @enable_privacy.setter
    def enable_privacy(self, enable_privacy):
        """Sets the enable_privacy of this PlayerResponse.


        :param enable_privacy: The enable_privacy of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._enable_privacy = enable_privacy

    @property
    def first_name(self):
        """Gets the first_name of this PlayerResponse.  # noqa: E501


        :return: The first_name of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PlayerResponse.


        :param first_name: The first_name of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def formatted_address(self):
        """Gets the formatted_address of this PlayerResponse.  # noqa: E501


        :return: The formatted_address of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this PlayerResponse.


        :param formatted_address: The formatted_address of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._formatted_address = formatted_address

    @property
    def full_name(self):
        """Gets the full_name of this PlayerResponse.  # noqa: E501


        :return: The full_name of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PlayerResponse.


        :param full_name: The full_name of this PlayerResponse.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this PlayerResponse.  # noqa: E501


        :return: The gender of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PlayerResponse.


        :param gender: The gender of this PlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FEMALE", "MALE"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hand(self):
        """Gets the hand of this PlayerResponse.  # noqa: E501


        :return: The hand of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._hand

    @hand.setter
    def hand(self, hand):
        """Sets the hand of this PlayerResponse.


        :param hand: The hand of this PlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["BOTH", "LEFT", "NONE", "RIGHT"]  # noqa: E501
        if hand not in allowed_values:
            raise ValueError(
                "Invalid value for `hand` ({0}), must be one of {1}"  # noqa: E501
                .format(hand, allowed_values)
            )

        self._hand = hand

    @property
    def id(self):
        """Gets the id of this PlayerResponse.  # noqa: E501


        :return: The id of this PlayerResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlayerResponse.


        :param id: The id of this PlayerResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this PlayerResponse.  # noqa: E501


        :return: The image_url of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this PlayerResponse.


        :param image_url: The image_url of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def invited(self):
        """Gets the invited of this PlayerResponse.  # noqa: E501


        :return: The invited of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this PlayerResponse.


        :param invited: The invited of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._invited = invited

    @property
    def is_logged_in_user(self):
        """Gets the is_logged_in_user of this PlayerResponse.  # noqa: E501


        :return: The is_logged_in_user of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_logged_in_user

    @is_logged_in_user.setter
    def is_logged_in_user(self, is_logged_in_user):
        """Sets the is_logged_in_user of this PlayerResponse.


        :param is_logged_in_user: The is_logged_in_user of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._is_logged_in_user = is_logged_in_user

    @property
    def is_player1(self):
        """Gets the is_player1 of this PlayerResponse.  # noqa: E501


        :return: The is_player1 of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_player1

    @is_player1.setter
    def is_player1(self, is_player1):
        """Sets the is_player1 of this PlayerResponse.


        :param is_player1: The is_player1 of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._is_player1 = is_player1

    @property
    def is_substitute(self):
        """Gets the is_substitute of this PlayerResponse.  # noqa: E501


        :return: The is_substitute of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_substitute

    @is_substitute.setter
    def is_substitute(self, is_substitute):
        """Sets the is_substitute of this PlayerResponse.


        :param is_substitute: The is_substitute of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._is_substitute = is_substitute

    @property
    def last_name(self):
        """Gets the last_name of this PlayerResponse.  # noqa: E501


        :return: The last_name of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PlayerResponse.


        :param last_name: The last_name of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def latitude(self):
        """Gets the latitude of this PlayerResponse.  # noqa: E501


        :return: The latitude of this PlayerResponse.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PlayerResponse.


        :param latitude: The latitude of this PlayerResponse.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PlayerResponse.  # noqa: E501


        :return: The longitude of this PlayerResponse.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PlayerResponse.


        :param longitude: The longitude of this PlayerResponse.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def lucra_connected(self):
        """Gets the lucra_connected of this PlayerResponse.  # noqa: E501


        :return: The lucra_connected of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._lucra_connected

    @lucra_connected.setter
    def lucra_connected(self, lucra_connected):
        """Sets the lucra_connected of this PlayerResponse.


        :param lucra_connected: The lucra_connected of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._lucra_connected = lucra_connected

    @property
    def partner_status(self):
        """Gets the partner_status of this PlayerResponse.  # noqa: E501


        :return: The partner_status of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._partner_status

    @partner_status.setter
    def partner_status(self, partner_status):
        """Sets the partner_status of this PlayerResponse.


        :param partner_status: The partner_status of this PlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if partner_status not in allowed_values:
            raise ValueError(
                "Invalid value for `partner_status` ({0}), must be one of {1}"  # noqa: E501
                .format(partner_status, allowed_values)
            )

        self._partner_status = partner_status

    @property
    def phone(self):
        """Gets the phone of this PlayerResponse.  # noqa: E501


        :return: The phone of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PlayerResponse.


        :param phone: The phone of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def ratings(self):
        """Gets the ratings of this PlayerResponse.  # noqa: E501


        :return: The ratings of this PlayerResponse.  # noqa: E501
        :rtype: PlayerRatingResponse
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this PlayerResponse.


        :param ratings: The ratings of this PlayerResponse.  # noqa: E501
        :type: PlayerRatingResponse
        """

        self._ratings = ratings

    @property
    def registered(self):
        """Gets the registered of this PlayerResponse.  # noqa: E501


        :return: The registered of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this PlayerResponse.


        :param registered: The registered of this PlayerResponse.  # noqa: E501
        :type: bool
        """
        if registered is None:
            raise ValueError("Invalid value for `registered`, must not be `None`")  # noqa: E501

        self._registered = registered

    @property
    def registration_details(self):
        """Gets the registration_details of this PlayerResponse.  # noqa: E501


        :return: The registration_details of this PlayerResponse.  # noqa: E501
        :rtype: RegistrationResponse
        """
        return self._registration_details

    @registration_details.setter
    def registration_details(self, registration_details):
        """Sets the registration_details of this PlayerResponse.


        :param registration_details: The registration_details of this PlayerResponse.  # noqa: E501
        :type: RegistrationResponse
        """

        self._registration_details = registration_details

    @property
    def registration_type(self):
        """Gets the registration_type of this PlayerResponse.  # noqa: E501


        :return: The registration_type of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._registration_type

    @registration_type.setter
    def registration_type(self, registration_type):
        """Sets the registration_type of this PlayerResponse.


        :param registration_type: The registration_type of this PlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVITATION", "UNCLAIMED"]  # noqa: E501
        if registration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_type, allowed_values)
            )

        self._registration_type = registration_type

    @property
    def short_address(self):
        """Gets the short_address of this PlayerResponse.  # noqa: E501


        :return: The short_address of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_address

    @short_address.setter
    def short_address(self, short_address):
        """Sets the short_address of this PlayerResponse.


        :param short_address: The short_address of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._short_address = short_address

    @property
    def show_rating_banner(self):
        """Gets the show_rating_banner of this PlayerResponse.  # noqa: E501


        :return: The show_rating_banner of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._show_rating_banner

    @show_rating_banner.setter
    def show_rating_banner(self, show_rating_banner):
        """Sets the show_rating_banner of this PlayerResponse.


        :param show_rating_banner: The show_rating_banner of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._show_rating_banner = show_rating_banner

    @property
    def sponsor(self):
        """Gets the sponsor of this PlayerResponse.  # noqa: E501


        :return: The sponsor of this PlayerResponse.  # noqa: E501
        :rtype: SponsorLogoResponse
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this PlayerResponse.


        :param sponsor: The sponsor of this PlayerResponse.  # noqa: E501
        :type: SponsorLogoResponse
        """

        self._sponsor = sponsor

    @property
    def status(self):
        """Gets the status of this PlayerResponse.  # noqa: E501


        :return: The status of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PlayerResponse.


        :param status: The status of this PlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def substitution_details(self):
        """Gets the substitution_details of this PlayerResponse.  # noqa: E501


        :return: The substitution_details of this PlayerResponse.  # noqa: E501
        :rtype: list[PlayerResponse]
        """
        return self._substitution_details

    @substitution_details.setter
    def substitution_details(self, substitution_details):
        """Sets the substitution_details of this PlayerResponse.


        :param substitution_details: The substitution_details of this PlayerResponse.  # noqa: E501
        :type: list[PlayerResponse]
        """

        self._substitution_details = substitution_details

    @property
    def team_status(self):
        """Gets the team_status of this PlayerResponse.  # noqa: E501


        :return: The team_status of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._team_status

    @team_status.setter
    def team_status(self, team_status):
        """Sets the team_status of this PlayerResponse.


        :param team_status: The team_status of this PlayerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "CANCELLED", "COMPLETE", "CONFIRMED", "DELETED", "FORFEITED", "INACTIVE", "INVITED", "IN_PROGRESS", "MATCH_BYE", "NOT_CONFIRMED", "ONGOING", "PENDING", "SUSPENDED_TOS_13", "UPCOMING"]  # noqa: E501
        if team_status not in allowed_values:
            raise ValueError(
                "Invalid value for `team_status` ({0}), must be one of {1}"  # noqa: E501
                .format(team_status, allowed_values)
            )

        self._team_status = team_status

    @property
    def username(self):
        """Gets the username of this PlayerResponse.  # noqa: E501


        :return: The username of this PlayerResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PlayerResponse.


        :param username: The username of this PlayerResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def verified_email(self):
        """Gets the verified_email of this PlayerResponse.  # noqa: E501


        :return: The verified_email of this PlayerResponse.  # noqa: E501
        :rtype: bool
        """
        return self._verified_email

    @verified_email.setter
    def verified_email(self, verified_email):
        """Sets the verified_email of this PlayerResponse.


        :param verified_email: The verified_email of this PlayerResponse.  # noqa: E501
        :type: bool
        """

        self._verified_email = verified_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
