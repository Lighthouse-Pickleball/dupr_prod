# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SponsorLogoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'button_text': 'str',
        'description': 'str',
        'image_url': 'str',
        'sponsor_popup_heading': 'str',
        'sponsor_redirect_url': 'str'
    }

    attribute_map = {
        'button_text': 'buttonText',
        'description': 'description',
        'image_url': 'imageURL',
        'sponsor_popup_heading': 'sponsorPopupHeading',
        'sponsor_redirect_url': 'sponsorRedirectUrl'
    }

    def __init__(self, button_text=None, description=None, image_url=None, sponsor_popup_heading=None, sponsor_redirect_url=None):  # noqa: E501
        """SponsorLogoResponse - a model defined in Swagger"""  # noqa: E501
        self._button_text = None
        self._description = None
        self._image_url = None
        self._sponsor_popup_heading = None
        self._sponsor_redirect_url = None
        self.discriminator = None
        if button_text is not None:
            self.button_text = button_text
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if sponsor_popup_heading is not None:
            self.sponsor_popup_heading = sponsor_popup_heading
        if sponsor_redirect_url is not None:
            self.sponsor_redirect_url = sponsor_redirect_url

    @property
    def button_text(self):
        """Gets the button_text of this SponsorLogoResponse.  # noqa: E501


        :return: The button_text of this SponsorLogoResponse.  # noqa: E501
        :rtype: str
        """
        return self._button_text

    @button_text.setter
    def button_text(self, button_text):
        """Sets the button_text of this SponsorLogoResponse.


        :param button_text: The button_text of this SponsorLogoResponse.  # noqa: E501
        :type: str
        """

        self._button_text = button_text

    @property
    def description(self):
        """Gets the description of this SponsorLogoResponse.  # noqa: E501


        :return: The description of this SponsorLogoResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SponsorLogoResponse.


        :param description: The description of this SponsorLogoResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this SponsorLogoResponse.  # noqa: E501


        :return: The image_url of this SponsorLogoResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this SponsorLogoResponse.


        :param image_url: The image_url of this SponsorLogoResponse.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def sponsor_popup_heading(self):
        """Gets the sponsor_popup_heading of this SponsorLogoResponse.  # noqa: E501


        :return: The sponsor_popup_heading of this SponsorLogoResponse.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_popup_heading

    @sponsor_popup_heading.setter
    def sponsor_popup_heading(self, sponsor_popup_heading):
        """Sets the sponsor_popup_heading of this SponsorLogoResponse.


        :param sponsor_popup_heading: The sponsor_popup_heading of this SponsorLogoResponse.  # noqa: E501
        :type: str
        """

        self._sponsor_popup_heading = sponsor_popup_heading

    @property
    def sponsor_redirect_url(self):
        """Gets the sponsor_redirect_url of this SponsorLogoResponse.  # noqa: E501


        :return: The sponsor_redirect_url of this SponsorLogoResponse.  # noqa: E501
        :rtype: str
        """
        return self._sponsor_redirect_url

    @sponsor_redirect_url.setter
    def sponsor_redirect_url(self, sponsor_redirect_url):
        """Sets the sponsor_redirect_url of this SponsorLogoResponse.


        :param sponsor_redirect_url: The sponsor_redirect_url of this SponsorLogoResponse.  # noqa: E501
        :type: str
        """

        self._sponsor_redirect_url = sponsor_redirect_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SponsorLogoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SponsorLogoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
