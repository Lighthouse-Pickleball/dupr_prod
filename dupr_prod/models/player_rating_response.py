# coding: utf-8

"""
    DUPR APIs

    External RESTful APIs to access DUPR ratings, users and provide matches.  # noqa: E501

    OpenAPI spec version: v1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerRatingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_rating': 'str',
        'doubles': 'str',
        'doubles_provisional': 'bool',
        'doubles_reliability_score': 'float',
        'doubles_verified': 'str',
        'provisional_ratings': 'ProvisionalRating',
        'singles': 'str',
        'singles_provisional': 'bool',
        'singles_reliability_score': 'float',
        'singles_verified': 'str'
    }

    attribute_map = {
        'default_rating': 'defaultRating',
        'doubles': 'doubles',
        'doubles_provisional': 'doublesProvisional',
        'doubles_reliability_score': 'doublesReliabilityScore',
        'doubles_verified': 'doublesVerified',
        'provisional_ratings': 'provisionalRatings',
        'singles': 'singles',
        'singles_provisional': 'singlesProvisional',
        'singles_reliability_score': 'singlesReliabilityScore',
        'singles_verified': 'singlesVerified'
    }

    def __init__(self, default_rating=None, doubles=None, doubles_provisional=None, doubles_reliability_score=None, doubles_verified=None, provisional_ratings=None, singles=None, singles_provisional=None, singles_reliability_score=None, singles_verified=None):  # noqa: E501
        """PlayerRatingResponse - a model defined in Swagger"""  # noqa: E501
        self._default_rating = None
        self._doubles = None
        self._doubles_provisional = None
        self._doubles_reliability_score = None
        self._doubles_verified = None
        self._provisional_ratings = None
        self._singles = None
        self._singles_provisional = None
        self._singles_reliability_score = None
        self._singles_verified = None
        self.discriminator = None
        if default_rating is not None:
            self.default_rating = default_rating
        if doubles is not None:
            self.doubles = doubles
        if doubles_provisional is not None:
            self.doubles_provisional = doubles_provisional
        if doubles_reliability_score is not None:
            self.doubles_reliability_score = doubles_reliability_score
        if doubles_verified is not None:
            self.doubles_verified = doubles_verified
        if provisional_ratings is not None:
            self.provisional_ratings = provisional_ratings
        if singles is not None:
            self.singles = singles
        if singles_provisional is not None:
            self.singles_provisional = singles_provisional
        if singles_reliability_score is not None:
            self.singles_reliability_score = singles_reliability_score
        if singles_verified is not None:
            self.singles_verified = singles_verified

    @property
    def default_rating(self):
        """Gets the default_rating of this PlayerRatingResponse.  # noqa: E501


        :return: The default_rating of this PlayerRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._default_rating

    @default_rating.setter
    def default_rating(self, default_rating):
        """Sets the default_rating of this PlayerRatingResponse.


        :param default_rating: The default_rating of this PlayerRatingResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOUBLES", "SINGLES"]  # noqa: E501
        if default_rating not in allowed_values:
            raise ValueError(
                "Invalid value for `default_rating` ({0}), must be one of {1}"  # noqa: E501
                .format(default_rating, allowed_values)
            )

        self._default_rating = default_rating

    @property
    def doubles(self):
        """Gets the doubles of this PlayerRatingResponse.  # noqa: E501


        :return: The doubles of this PlayerRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._doubles

    @doubles.setter
    def doubles(self, doubles):
        """Sets the doubles of this PlayerRatingResponse.


        :param doubles: The doubles of this PlayerRatingResponse.  # noqa: E501
        :type: str
        """

        self._doubles = doubles

    @property
    def doubles_provisional(self):
        """Gets the doubles_provisional of this PlayerRatingResponse.  # noqa: E501


        :return: The doubles_provisional of this PlayerRatingResponse.  # noqa: E501
        :rtype: bool
        """
        return self._doubles_provisional

    @doubles_provisional.setter
    def doubles_provisional(self, doubles_provisional):
        """Sets the doubles_provisional of this PlayerRatingResponse.


        :param doubles_provisional: The doubles_provisional of this PlayerRatingResponse.  # noqa: E501
        :type: bool
        """

        self._doubles_provisional = doubles_provisional

    @property
    def doubles_reliability_score(self):
        """Gets the doubles_reliability_score of this PlayerRatingResponse.  # noqa: E501


        :return: The doubles_reliability_score of this PlayerRatingResponse.  # noqa: E501
        :rtype: float
        """
        return self._doubles_reliability_score

    @doubles_reliability_score.setter
    def doubles_reliability_score(self, doubles_reliability_score):
        """Sets the doubles_reliability_score of this PlayerRatingResponse.


        :param doubles_reliability_score: The doubles_reliability_score of this PlayerRatingResponse.  # noqa: E501
        :type: float
        """

        self._doubles_reliability_score = doubles_reliability_score

    @property
    def doubles_verified(self):
        """Gets the doubles_verified of this PlayerRatingResponse.  # noqa: E501


        :return: The doubles_verified of this PlayerRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._doubles_verified

    @doubles_verified.setter
    def doubles_verified(self, doubles_verified):
        """Sets the doubles_verified of this PlayerRatingResponse.


        :param doubles_verified: The doubles_verified of this PlayerRatingResponse.  # noqa: E501
        :type: str
        """

        self._doubles_verified = doubles_verified

    @property
    def provisional_ratings(self):
        """Gets the provisional_ratings of this PlayerRatingResponse.  # noqa: E501


        :return: The provisional_ratings of this PlayerRatingResponse.  # noqa: E501
        :rtype: ProvisionalRating
        """
        return self._provisional_ratings

    @provisional_ratings.setter
    def provisional_ratings(self, provisional_ratings):
        """Sets the provisional_ratings of this PlayerRatingResponse.


        :param provisional_ratings: The provisional_ratings of this PlayerRatingResponse.  # noqa: E501
        :type: ProvisionalRating
        """

        self._provisional_ratings = provisional_ratings

    @property
    def singles(self):
        """Gets the singles of this PlayerRatingResponse.  # noqa: E501


        :return: The singles of this PlayerRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._singles

    @singles.setter
    def singles(self, singles):
        """Sets the singles of this PlayerRatingResponse.


        :param singles: The singles of this PlayerRatingResponse.  # noqa: E501
        :type: str
        """

        self._singles = singles

    @property
    def singles_provisional(self):
        """Gets the singles_provisional of this PlayerRatingResponse.  # noqa: E501


        :return: The singles_provisional of this PlayerRatingResponse.  # noqa: E501
        :rtype: bool
        """
        return self._singles_provisional

    @singles_provisional.setter
    def singles_provisional(self, singles_provisional):
        """Sets the singles_provisional of this PlayerRatingResponse.


        :param singles_provisional: The singles_provisional of this PlayerRatingResponse.  # noqa: E501
        :type: bool
        """

        self._singles_provisional = singles_provisional

    @property
    def singles_reliability_score(self):
        """Gets the singles_reliability_score of this PlayerRatingResponse.  # noqa: E501


        :return: The singles_reliability_score of this PlayerRatingResponse.  # noqa: E501
        :rtype: float
        """
        return self._singles_reliability_score

    @singles_reliability_score.setter
    def singles_reliability_score(self, singles_reliability_score):
        """Sets the singles_reliability_score of this PlayerRatingResponse.


        :param singles_reliability_score: The singles_reliability_score of this PlayerRatingResponse.  # noqa: E501
        :type: float
        """

        self._singles_reliability_score = singles_reliability_score

    @property
    def singles_verified(self):
        """Gets the singles_verified of this PlayerRatingResponse.  # noqa: E501


        :return: The singles_verified of this PlayerRatingResponse.  # noqa: E501
        :rtype: str
        """
        return self._singles_verified

    @singles_verified.setter
    def singles_verified(self, singles_verified):
        """Sets the singles_verified of this PlayerRatingResponse.


        :param singles_verified: The singles_verified of this PlayerRatingResponse.  # noqa: E501
        :type: str
        """

        self._singles_verified = singles_verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerRatingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerRatingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
